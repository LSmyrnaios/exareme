library(base)
library(jsonlite)
library(tidyverse)
# Create simple coding contrasts
simpleCodingContrast <- function(variable) {
  levelsVar <- levels(variable)
  Nlevel <- length(levelsVar)
  contrastTreatment<-contr.treatment(Nlevel)
  contrast <- contrastTreatment - matrix(rep(1/Nlevel, Nlevel*(Nlevel-1)), ncol = Nlevel-1)
  rownames(contrast) <- levelsVar
  colnames(contrast) <-  levelsVar[-1]
  contrast
}
#Load data "desd-synthdata.csv" and check number of rows = 1000.
rawData <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv")
### Test 1.1: Test linear regression with one categorical regressor
df_LR11 <- rawData %>%
  select(
    lefthippocampus,
    alzheimerbroadcategory) %>%
  mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
  mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
  drop_na()
head(df_LR11)
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory) %>%
  summary()
Test1_1_DC <-toJSON(lmresult, force =TRUE, pretty=TRUE)
lmresult$coefficients
toJSON(lmresult$coefficients)
toJSON(lmresult$coefficients$names)
lmresult$terms
lmresult$terms[1]
lmresult$terms[[1]]
lmresult$terms[[2]]
lmresult$terms[[3]]
names(coef(lmresult)
)
names(lmresult$coefficients)
variable.names(lmresults)
variable.names(lmresult)
toJSON(lmresult$coefficients)
lmresult$coefficients
toJSON(lmresult$coefficients, force =TRUE, pretty=TRUE)
lmresult$coefficients$Intercept
lmresult$coefficients$(Intercept)
lmresult$coefficients
lmresult$coefficients$
name
names lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory) 
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory) 
names(lmresult)
lmresult$coefficients
toJSON(lmresult$coefficients)
lm$tterms
lmresult$tterms
lmresult$model
names(lmresult)
lmresult$coefficients
names(lmresult$coefficients)
TOJSON(c(names(lmresult$coefficients), lmresult$coefficients)
)
c(names(lmresult$coefficients), lmresult$coefficients)
ToJSON(c(names(lmresult$coefficients), lmresult$coefficients))
toJSON(c(names(lmresult$coefficients), lmresult$coefficients))
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory) 
Test1_1_DC <-toJSON(c(names(lmresult$coefficients), lmresult$coefficients))
Test1_1_DC
library(rjson)
a 
a <- list(rsid_list=c("a","b","c"))
a
toJSON(a)
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory) 
Test1_1_DC <-toJSON(c(names(lmresult$coefficients), lmresult$coefficients))
Test1_1_DC
(names(lmresult$coefficients))
lmresult$coefficients
[lmresult$coefficients]
lmresult$coefficients
as.data.table(lmresult$coefficients, keep.rownames=FALSE, â€¦)
as.data.table(lmresult$coefficients, keep.rownames=TRUE)
library(data.table)
as.data.table(lmresult$coefficients, keep.rownames=TRUE)
toJSON(as.data.table(lmresult$coefficients, keep.rownames=TRUE))
toJSON(as.data.table(lmresult$coefficients, keep.rownames=TRUE)')
toJSON(t(as.data.table(lmresult$coefficients, keep.rownames=TRUE)'))
toJSON(t(as.data.table(lmresult$coefficients, keep.rownames=TRUE)))
t(as.data.table(lmresult$coefficients, keep.rownames=TRUE))
toJSON(as.data.table(lmresult$coefficients, keep.rownames=TRUE)')
toJSON(as.data.table(lmresult$coefficients, keep.rownames=TRUE))
toJSON(as.data.table(lmresult$coefficients, keep.rownames=TRUE))
lmresults
lmresult
summary(lmresult)
summary(lmresult)$coefficients
toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE)
toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
summary(lmresult)
names(summary(lmresult))
names(summary(lmresult))$sigma
summary(lmresult)$sigma
summary(lmresult)$df
summary(lmresult)$r.squared
summary(lmresult)$adj.r.squared
summary(lmresult)$fststistic
summary(lmresult)$fstatistic
summary(lmresult)$cov.unsclaled
 summary(lmresult)$df[1] 
 summary(lmresult)$df[2] 
matrix(c(sigma,summary(lmresult)$sigma, df,summary(lmresult)$df[2],  r_squared, summary(lmresult)$r.squared, 
adj_r_squared, summary(lmresult)$adj.r.squared,fstatistic, summary(lmresult)$fstatistic[2] ),ncol=2,byrow=TRUE)
matrix(c('sigma',summary(lmresult)$sigma, 'df',summary(lmresult)$df[2],  'r_squared', adj_r_squared, summary(lmresult)$adj.r.squared,fstatistic, summary(lmresult)$fstatistic[2] ),ncol=2,byrow=TRUE), summary(lmresult)$r.squared, 
matrix(c('sigma',summary(lmresult)$sigma, 'df',summary(lmresult)$df[2],  'r_squared', summary(lmresult)$r.squared, 'adj_r_squared', summary(lmresult)$adj.r.squared, 'fstatistic', summary(lmresult)$fstatistic[2] ),ncol=2,byrow=TRUE)
Test1_1__DC_stats<- matrix(c('sigma',summary(lmresult)$sigma, 'df',summary(lmresult)$df[2],  'r_squared', summary(lmresult)$r.squared, 'adj_r_squared', summary(lmresult)$adj.r.squared, 'fstatistic', summary(lmresult)$fstatistic[2] ),ncol=2,byrow=TRUE)
colnames(Test1_1__DC_stats) <- c("name","val")
Test1_1_1_DC_stats
Test1_1_1__DC_stats
Test1_1__DC_stats
Test1_1_DC_stats<- matrix(c('sigma',summary(lmresult)$sigma, 'df',summary(lmresult)$df[2],  'r_squared', summary(lmresult)$r.squared, 'adj_r_squared', summary(lmresult)$adj.r.squared, 'fstatistic', summary(lmresult)$fstatistic[2] ),ncol=2,byrow=TRUE)
colnames(Test1_1_DC_stats) <- c("name","val")
Test1_1_DC_stats<-toJSON(as.table(Test1_1_DC_stats))
Test_a_DC_stats
Test_1_DC_stats
Test1_1_DC_stats
Test1_1_DC_stats<- matrix(c(,summary(lmresult)$sigma,summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[2] ),ncol=5,byrow=TRUE)
colnames(Test1_1_DC_stats) <- c("sigma","df", "r_squared", "adj_r_squared", "fstatistic")
Test1_1_DC_stats<-toJSON(as.table(Test1_1_DC_stats))
Test1_1_DC_stats
Test1_1_DC_stats<- matrix(c(,summary(lmresult)$sigma,summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[2] ),ncol=5,byrow=TRUE)
Test1_1_DC_stats<- matrix(c(summary(lmresult)$sigma,summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[2] ),ncol=5,byrow=TRUE)
Test1_1_DC_stats
colnames(Test1_1_DC_stats) <- c("sigma","df", "r_squared", "adj_r_squared", "fstatistic")
Test1_1_DC_stats
Test1_1_DC_stats<-toJSON(as.table(Test1_1_DC_stats))
Test1_1_DC_stats
Test1_1_DC_stats
Test1_1_DC_stats<-toJSON(as.data.table(Test1_1_DC_stats))
Test1_1_DC_stats
Test1_1_DC_stats<- matrix(c(summary(lmresult)$sigma,summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[2] ),ncol=5,byrow=TRUE)
colnames(Test1_1_DC_stats) <- c("sigma","df", "r_squared", "adj_r_squared", "fstatistic")
Test1_1_DC_stats<-toJSON(as.data.table(Test1_1_DC_stats))
Test1_1_DC_stats
Test1_1_DC_stats<- matrix(c(summary(lmresult)$sigma,summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[2] ),ncol=5,byrow=TRUE)
colnames(Test1_1_DC_stats) <- c("sigma","df", "r_squared", "adj_r_squared", "fstatistic")
Test1_1_DC_stats<-toJSON(as.data.table(Test1_1_DC_stats))
Test1_1_DC_stats
q()
 df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
library(base)
library(jsonlite)
library(tidyverse)
library(data.table)
# Create simple coding contrasts
simpleCodingContrast <- function(variable) {
  levelsVar <- levels(variable)
  Nlevel <- length(levelsVar)
  contrastTreatment<-contr.treatment(Nlevel)
  contrast <- contrastTreatment - matrix(rep(1/Nlevel, Nlevel*(Nlevel-1)), ncol = Nlevel-1)
  rownames(contrast) <- levelsVar
  colnames(contrast) <-  levelsVar[-1]
  contrast
}
#Load data "desd-synthdata.csv" and check number of rows = 1000.
rawData <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv")
### Test 1.1: Test linear regression with one categorical regressor
df_LR11 <- rawData %>%
  select(
    lefthippocampus,
    alzheimerbroadcategory) %>%
  mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
  mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
  drop_na()
head(df_LR11)
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
Test1_1_DC_coeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rown
lmresult
summary(lmresult)
q()
library(base)
library(jsonlite)
library(tidyverse)
library(data.table)
# Create simple coding contrasts
simpleCodingContrast <- function(variable) {
  levelsVar <- levels(variable)
  Nlevel <- length(levelsVar)
  contrastTreatment<-contr.treatment(Nlevel)
  contrast <- contrastTreatment - matrix(rep(1/Nlevel, Nlevel*(Nlevel-1)), ncol = Nlevel-1)
  rownames(contrast) <- levelsVar
  colnames(contrast) <-  levelsVar[-1]
  contrast
}
#Load data "desd-synthdata.csv" and check number of rows = 1000.
rawData <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv")
### Test 1.1: Test linear regression with one categorical regressor
df_LR11 <- rawData %>%
  select(
    lefthippocampus,
    alzheimerbroadcategory) %>%
  mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
  mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
  drop_na()
head(df_LR11)
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
summar(lmresult)
summary(lmresult)
names(summary(lmresult))
 summary(lmresult)$df
summary(lmresult)$fstatistic
min(summary(lmresult)$residuals)
max(summary(lmresult)$residuals)
q()
library(base)
library(jsonlite)
library(tidyverse)
library(data.table)
# Create simple coding contrasts
simpleCodingContrast <- function(variable) {
  levelsVar <- levels(variable)
  Nlevel <- length(levelsVar)
  contrastTreatment<-contr.treatment(Nlevel)
  contrast <- contrastTreatment - matrix(rep(1/Nlevel, Nlevel*(Nlevel-1)), ncol = Nlevel-1)
  rownames(contrast) <- levelsVar
  colnames(contrast) <-  levelsVar[-1]
  contrast
}
#Load data "desd-synthdata.csv" and check number of rows = 1000.
rawData <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv")
### Test 1.1: Test linear regression with one categorical regressor
df_LR11 <- rawData %>%
  select(
    lefthippocampus,
    alzheimerbroadcategory) %>%
  mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
  mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
  drop_na()
head(df_LR11)
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
Test1_1_DC_coeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
Test1_1_DC_stats<- matrix(c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)), ncol=5,byrow=TRUE)
Test1_1_DC_stats
Test1_1_DC_stats<- matrix(c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)), ncol=8,byrow=TRUE)
colnames(Test1_1_DC_stats) <- c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")
Test1_1_DC_stats<-toJSON(as.data.table(Test1_1_DC_stats))
Test1_1_DC_stats
q()
matrix(c(1,2,3))
matrix(c(1,2,3),ncols =3)
matrix(c(1,2,3),ncol =3)
matrix(c(1,2,3), ncol =3)
A =matrix(c(1,2,3), ncol =3)
rbind(A, c(5,6,7))
A =rbind(A, c(5,6,7))
A
toJSON(A)
library(jsonlite)
toJSON(A)
library(base)
library(jsonlite)
library(tidyverse)
library(data.table)
# Create simple coding contrasts
simpleCodingContrast <- function(variable) {
  levelsVar <- levels(variable)
  Nlevel <- length(levelsVar)
  contrastTreatment<-contr.treatment(Nlevel)
  contrast <- contrastTreatment - matrix(rep(1/Nlevel, Nlevel*(Nlevel-1)), ncol = Nlevel-1)
  rownames(contrast) <- levelsVar
  colnames(contrast) <-  levelsVar[-1]
  contrast
}
#Load data "desd-synthdata.csv" and check number of rows = 1000.
rawData <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv")
### Test 1.1: Test linear regression with one categorical regressor
df_LR11 <- rawData %>%
  select(
    lefthippocampus,
    alzheimerbroadcategory) %>%
  mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
  mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
  drop_na()
head(df_LR11)
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
  
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, 
                        summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)), 
                        ncol=8,byrow=TRUE, 
                        dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals"))
                  )
ResultStats
toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared, 
                        summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)), 
                        ncol=8,byrow=TRUE, 
                        dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
#Analysis with dummy coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
                        summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
                        ncol=8,byrow=TRUE,
                        dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= matrix(c("Test1.1.DC",ResultCoeff,ResultStats),ncol=3,byrow=TRUE,dimnames= list('',c("testname",ResultCoeff,ResultStats)))
TotalResult
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
                        summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
                        ncol=8,byrow=TRUE,
                        dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= matrix(c("Test1.1.DC",ResultCoeff,ResultStats),ncol=3,byrow=TRUE,dimnames= list('',c("testname","ResultCoeff","ResultStats")))
TotalResult
#Analysis with simple coding contrast
lmresult <- df_LR11 %>%
  lm(formula = lefthippocampus~alzheimerbroadcategory, contrasts = list(alzheimerbroadcategory = simpleCodingContrast(df_LR11$alzheimerbroadcategory))) %>%
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
                        summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
                        ncol=8,byrow=TRUE,
                        dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
rbind(TotalResult, c("Test1.1.SC",ResultCoeff,ResultStats))
TotalResult[1,]
TotalResult[0,]
TotalResult[,0]
TotalResult[,1]
TotalResult[,2]
q()
