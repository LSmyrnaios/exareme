### Test 2.1: one continuous regressor
df_LR21 <- rawData %>%
select(
lefthippocampus,
csfglobal) %>%
drop_na()
head(df_LR21)
lmresult <-df_LR21 %>%
lm(formula = lefthippocampus ~ csfglobal)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test2.1",ResultCoeff,ResultStats))
### Test 2.2: two continuous regressors without interaction
df_LR22 <- rawData %>%
select(
lefthippocampus,
opticchiasm,
minimentalstate) %>%
drop_na()
head(df_LR22)
lmresult <-df_LR22 %>%
lm(formula = lefthippocampus ~ opticchiasm + minimentalstate)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test2.2",ResultCoeff,ResultStats))
### Test 2.2b: two continuous regressors with interaction
lmresult <-df_LR22 %>%
lm(formula = lefthippocampus ~ opticchiasm * minimentalstate)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test2.2b",ResultCoeff,ResultStats))
### Test 2.3: three continuous regressors without interaction
df_LR23 <- rawData %>%
select(
lefthippocampus,
opticchiasm,
minimentalstate,
subjectage) %>%
drop_na()
head(df_LR23)
lmresult <-df_LR23 %>%
lm(formula = lefthippocampus ~ opticchiasm + minimentalstate + subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test2.3",ResultCoeff,ResultStats))
### Test 2.3b: three continuous regressors with interaction
lmresult <-df_LR23 %>%
lm(formula = lefthippocampus ~ opticchiasm * minimentalstate * subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test2.3b",ResultCoeff,ResultStats))
##------------------------------------------------------------------------------------------------------------------------------------------------------------
## Test linear regression with mixted categorical and continuous regressors
### Test 3.1: one categorical and one continuous regressors without interaction
df_LR31 <- rawData %>%
select(
lefthippocampus,
alzheimerbroadcategory,
subjectage) %>%
mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
drop_na()
head(df_LR31)
#Analysis with dummy coding contrast
lmresult <- df_LR31 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.1.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR31 %>%
lm(formula = lefthippocampus~ alzheimerbroadcategory + subjectage,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory)))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.1.SC",ResultCoeff,ResultStats))
### Test 3.1b: one categorical and one continuous regressors with interaction
# Analysis with dummy coding contrast
lmresult <- df_LR31 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.1b.DC",ResultCoeff,ResultStats))
#Analysis with simple coding contrast
lmresult <- df_LR31 %>%
lm(formula = lefthippocampus~ alzheimerbroadcategory * subjectage,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory)))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.1b.SC",ResultCoeff,ResultStats))
### Test 3.2: one categorical and two continuous regressors without interaction
df_LR32 <- rawData %>%
select(
lefthippocampus,
alzheimerbroadcategory,
subjectage,
opticchiasm) %>%
mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
drop_na()
head(df_LR32)
# Analysis with dummy coding contrast
lmresult <- df_LR32 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + subjectage + opticchiasm)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.2.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR32 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + subjectage + opticchiasm,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory)))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.2.SC",ResultCoeff,ResultStats))
### Test 3.2b: one categorical and two continuous regressors with interaction
# Analysis with dummy coding contrast
lmresult <- df_LR32 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * subjectage * opticchiasm)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.2b.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR32 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * subjectage * opticchiasm,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory)))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.2b.SC",ResultCoeff,ResultStats))
### Test 3.3: two categorical and one continuous regressors without interaction
df_LR33 <- rawData %>%
select(
lefthippocampus,
alzheimerbroadcategory,
subjectage,
gender) %>%
mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
mutate(gender                 = factor(gender)) %>%
mutate(gender                 = relevel(gender, ref = "M")) %>%
drop_na()
head(df_LR33)
# Analysis with dummy coding contrast
lmresult <- df_LR33 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + gender + subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.3.DC",ResultCoeff,ResultStats))
#Analysis with simple coding contrast
lmresult <- df_LR33 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + gender + subjectage,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory),
gender                 = simpleCodingContrast(relevel(df_LR33$gender, ref = "M"))))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.2.3.SC",ResultCoeff,ResultStats))
### Test 3.3b: two categorical and one continuous regressors with interaction
# Analysis with dummy coding contrast
lmresult <- df_LR33 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * gender * subjectage)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.3b.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR33 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * gender * subjectage,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory),
gender                 = simpleCodingContrast(relevel(df_LR33$gender, ref = "M"))))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.3b.SC",ResultCoeff,ResultStats))
### Test 3.4: two categorical and two continuous regressors without interaction
df_LR34 <- rawData %>%
select(
lefthippocampus,
alzheimerbroadcategory,
brainstem,
opticchiasm,
gender) %>%
mutate(alzheimerbroadcategory = factor(alzheimerbroadcategory)) %>%
mutate(alzheimerbroadcategory = relevel(alzheimerbroadcategory, ref = "AD")) %>%
mutate(gender                 = factor(gender)) %>%
mutate(gender                 = relevel(gender, ref = "M")) %>%
drop_na()
head(df_LR34)
# Analysis with dummy coding contrast
lmresult <- df_LR34 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + gender + brainstem + opticchiasm)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.4.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR34 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory + gender + brainstem + opticchiasm,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory),
gender                 = simpleCodingContrast(relevel(df_LR33$gender, ref = "M"))))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.4.SC",ResultCoeff,ResultStats))
### Test 3.4b: two categorical and two continuous regressors with interaction
# Analysis with dummy coding contrast
lmresult <-df_LR34 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * gender * brainstem * opticchiasm)
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.4b.DC",ResultCoeff,ResultStats))
# Analysis with simple coding contrast
lmresult <- df_LR34 %>%
lm(formula = lefthippocampus ~ alzheimerbroadcategory * gender * brainstem * opticchiasm,
contrasts = list(
alzheimerbroadcategory = simpleCodingContrast(df_LR31$alzheimerbroadcategory),
gender                 = simpleCodingContrast(relevel(df_LR33$gender, ref = "M"))))
ResultCoeff <-toJSON(as.data.table(summary(lmresult)$coefficients, keep.rownames=TRUE))
ResultStats<- toJSON(as.data.table( matrix( c(summary(lmresult)$sigma, summary(lmresult)$df[2], summary(lmresult)$r.squared, summary(lmresult)$adj.r.squared,
summary(lmresult)$fstatistic[1], summary(lmresult)$fstatistic[2], min(summary(lmresult)$residuals), max(summary(lmresult)$residuals)),
ncol=8,byrow=TRUE,
dimnames = list ('',c("sigma","df", "r_squared", "adj_r_squared", "fstatistic","numdf", "minresiduals","maxresiduals")))))
TotalResult= rbind(TotalResult, c("Test3.4b.SC",ResultCoeff,ResultStats))
toJSON(TotalResult)
library(base)
library(jsonlite)
library(tidyverse)
library(jmv)
df_TT <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv",
col_types = cols(gender = col_factor(levels = c("M",
"F"))))
## Test #1: independent samples T-Test
# In this test, we want to know if the volume of the female's left hippocampus is different from that of the male.
#We check if the means are different.
Result = ttestIS(
formula = lefthippocampus ~ gender,
data = df_TT,
hypothesis = 'different',
effectSize = T
)
Test1aResult <- toJSON(Result$ttest$asDF)
Result = ttestIS(
formula = lefthippocampus ~ gender,
data = df_TT,
hypothesis = 'different',
effectSize = T,
ci = T.
meandiff = T
)
Test1bResult <- toJSON(Result$ttest$asDF)
#We check if the mean volumes are greater for men than for women.
Result = ttestIS(
formula = lefthippocampus ~ gender,
data = df_TT,
hypothesis = 'oneGreater',
meanDiff = T,
ci = T,
effectSize = T
)
Test2Result <- toJSON(Result$ttest$asDF)
#We check if the mean volumes are greater for men than for women.
Result = ttestIS(
formula = lefthippocampus ~ gender,
data = df_TT,
hypothesis = 'twoGreater',
meanDiff = T,
ci = T,
effectSize = T
)
Test3Result <- toJSON(Result$ttest$asDF)
library(base)
library(jsonlite)
library(tidyverse)
library(jmv)
df_TT <- read_csv("../unit_tests/datasets/CSVs/desd-synthdata.csv",
    col_types = cols(gender = col_factor(levels = c("M","F"))))
## Comparison with a reference value
#In this test, we compare the mean of the left and right hippocampus #volumes separetely, with a reference value 3.
Result <- ttestOneS(
  data = df_TT,
  vars = vars(lefthippocampus, righthippocampus),
  testValue = 3.0,
  hypothesis = 'lt',
  effectSize = T ,
  ci = T,
  meanDiff = T)
Result
toJSON(Result$ttest$asDF)
 ttestOneS(
  data = df_TT,
  vars = vars(lefthippocampus, righthippocampus),
  testValue = 3.0,
  hypothesis = 'dt',
  effectSize = T ,
  ci = T,
  meanDiff = T)
Result <- ttestOneS(
  data = df_TT,
  vars = vars(lefthippocampus, righthippocampus),
  testValue = 3.0,
  hypothesis = 'dt',
  effectSize = T ,
  ci = T,
  meanDiff = T)
Test2Result <- toJSON(Result$ttest$asDF)
Test2Result
Result$ttest
Result <- ttestOneS(
  data = df_TT,
  vars = vars(lefthippocampus, righthippocampus),
  testValue = 3.0,
  hypothesis = 'lt',
  effectSize = T ,
  ci = T,
  meanDiff = T)
Result$ttest
Result$ttest$Lower
name(Result$ttest)
names(Result$ttest)
name(Result)
Result$ttest
Result$ttest$asDF
toJSON(Result$ttest$asDF)
toJSON(Result$ttest$asDF,.inf = " Infinity")
toJSON(Result$ttest$asDF,.inf = "Inf")
toJSON(Result$ttest$asDF,.na = "null",

Result$ttest$asDF
Result$ttest$asDF$cil
toJSON(Result$ttest$asDF$cil)
Result$ttest$asDF
toJSON(Result$ttest$asDF)
toJSON(Result$ttest$asDF$cil)
toJSON(Result$ttest$asDF$stat[stud])
toJSON(Result$ttest$asDF$stat)
toJSON(Result$ttest$asDF$var.Result$ttest$asDF$stat)
toJSON(Result$ttest$asDF$var,Result$ttest$asDF$stat)
toJSON(c(Result$ttest$asDF$var,Result$ttest$asDF$stat))
toJSON(rbind(Result$ttest$asDF$var,Result$ttest$asDF$stat))
toJSON(rbind(Result$ttest$asDF$var,Result$ttest$asDF$cil))
toJSON(Result$ttest$asDF , na ='strings')
toJSON(Result$ttest$asDF , .na ='strings')
toJSON(Result$ttest$asDF , pretty= TRUE)
toJSON(Result$ttest$asDF , pretty= TRUE, na ="null")
toJSON(Result$ttest$asDF , pretty= TRUE, na ="null" )
testString <- c(1,2,3,4,NA,NaN,Inf,8,9);
toJSON(testString);
testString <- c(1,2,3,4,NA,NaN,-Inf,8,9);
toJSON(testString);
toJSON(Result$ttest$asDF[0] )
toJSON(Result$ttest$asDF[1] )
toJSON(Result$ttest$asDF[,1] )
toJSON(Result$ttest$asDF[,:] )
toJSON(Result$ttest$asDF[,] )
toJSON(Result$ttest$asDF[:,] )
toJSON(Result$ttest$asDF[0-5,] )
toJSON(Result$ttest$asDF[,0-10] )
toJSON(Result$ttest$asDF[0,0-10] )

Result$ttest$asDF
Result$ttest$asDF[0]
Result$ttest$asDF[1]
Result$ttest$asDF[2]
df[is.finite(df)]
df[is.finite(Result$ttest$asDF)]
Result$ttest$asDF[is.finite(Result$ttest$asDF)]
df = Result$ttest$asDF
df[df == np.Inf]
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),NA)))
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),"Inf)))
df = Result$ttest$asDF
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),"Inf)))
  
df = Result$ttest$asDF
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),"Inf")))
Test1Result <- toJSON(df)
Test1Result
df
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),"Inf")))
Test1Result
Result <- ttestOneS(
  data = df_TT,
  vars = vars(lefthippocampus, righthippocampus),
  testValue = 3.0,
  hypothesis = 'lt',
  effectSize = T ,
  ci = T,
  meanDiff = T)
df = Result$ttest$asDF
do.call(data.frame,lapply(df, function(x) replace(x, is.infinite(x),"Inf")))
  
 toJSON(df)
testString <- c(1,2,3,4,NA,NaN,Inf,8,9);
toJSON(testString);
testString <- c(1,2,3,4,NA,NaN,-Inf,8,9);
toJSON(testString);
Result$ttest$asDF
Result$ttest$asDF$var[stud]
Result$ttest$asDF$var
Result$ttest$asDF$var,Result$ttest$asDF$stat
c(Result$ttest$asDF$var,Result$ttest$asDF$stat)
c(Result$ttest$asDF$var,Result$ttest$asDF$stat, Result$ttest$asDF$cil)
toJSON(c(Result$ttest$asDF$var,Result$ttest$asDF$stat, Result$ttest$asDF$cil))
toJSON(c(Result$ttest$asDF))
toJSON(c(Result$ttest$asDF,columns =2))

x =c(Result$ttest$asDF)
dimx() <-c(2,5)
dim(x) <-c(2,5)
dim(x) <-c(2,)
dim(x) <-c(2,10)
len(x)
size(x)
length(x)
Result$ttest$asDF
Result$ttest$asDF$cil
typeOf(Result$ttest$asDF$cil)
typeof(Result$ttest$asDF$cil)
typeof(Result$ttest$asDF$cil[1])
if Result$ttest$asDF$cil[1] == Inf
Result$ttest$asDF$cil[1] == Inf
Result$ttest$asDF$cil[1] == -Inf
if Result$ttest$asDF$cil[1] == -Inf
if Result$ttest$asDF$cil[1] == -Inf: Result$ttest$asDF$cil[1] ='-Inf'
Result$ttest$asDF$cil[1] ='-Inf'
toJSON(c(Result$ttest$asDF))
toJSON(rbind(Result$ttest$asDF))
toJSON(rbind(Result$ttest$asDF,rows=2))
toJSON(rbind(Result$ttest$asDF))
toJSON(rbind(Result$ttest$asDF[1:10]))
toJSON(Result$ttest$asDF[1:10])
toJSON(str(Result$ttest$asDF))
A =toJSON(str(Result$ttest$asDF))
print A
A
A =toJSON(Result$ttest$asDF)
A
class(Inf)
class(Result$ttest$asDF)
class(Result$ttest$asDF$cil)
class(Result$ttest$asDF$cil[0])
Result$ttest$asDF$cil[0]
Result$ttest$asDF$cil[1]
Result$ttest$asDF$cil[2]
toJSON(Result$ttest$asDF,.na="string")
toJSON(Result$ttest$asDF,.na="string", pretty = TRUE)
toJSON(Result$ttest$asDF,.null='list'.na="string", pretty = TRUE)
toJSON(Result$ttest$asDF,.null='list',.na="string", pretty = TRUE)
toJSON(Result$ttest$asDF,na="string", pretty = TRUE)
toJSON(Result$ttest$asDF,na="string", pretty = TRUE)
q()
